#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Apr  1 11:45:04 2021

determine PED

@author: dlevitas
"""

# data_dir = '/media/data/ezbids/dicoms/OpenScience/20200122.OpenSciJan22.10462@thwjames_OpenScience'
# nifti_file = '{}/time-20200122142947-sn-4.nii.gz'.format(data_dir)
# json_file = '{}/time-20200122142947-sn-4.json'.format(data_dir)

import json
import nibabel as nib


# def determinePED(nifti_file, json_file):    
def determinePED(pe_direction, ornt):
    '''
    Takes pe_direction and image orientation to correct pe_direction (if need be)
    and ouput the PED value (used by BIDS _dir-)

    Parameters
    ----------
    pe_direction : string
        Value from PhaseEncodingDirection in json file generated by dcm2niix
    ornt: string
        Value of ''.join(nib.aff2axcodes(nii_img.affine))

    Returns
    -------
    proper_pe_direction: string
        Either input pe_direction (if ijk), or corrected pe_direction (if xyz)
    PED: string
        direction value used by BIDS _dir-
    '''
            
    # json_data = open(json_file)
    # json_data = json.load(json_data, strict=False)
    # pe_direction = json_data['PhaseEncodingDirection']
    
    # nii_img = nib.load(nifti_file)
    # ornt = ''.join(nib.aff2axcodes(nii_img.affine))
    
    axes = (("R", "L"), ("A", "P"), ("S", "I"))
    proper_ax_idcs = {"i": 0, "j": 1, "k": 2}
    improper_ax_idcs = {"x": 0, "y": 1, "z": 2}

    # pe_direction is ijk
    if any(x in pe_direction for x in ['i','i-','j','j-','k','k']):
        proper_pe_direction = pe_direction
        
        axcode = ornt[proper_ax_idcs[pe_direction[0]]]
        inv = pe_direction[1:] == "-"
        
        for ax in axes:
            for flip in (ax, ax[::-1]):
                if flip[not inv].startswith(axcode):
                    PED = "".join(flip)
                    
        print("With a pe_direction of '{}' and orientation of '{}', the " \
             "PED value is '{}'".format(pe_direction, ornt, PED))
        return proper_pe_direction, PED
        
    # pe_direction is not ijk and needs to be adjusted
    else:
        axcode = ornt[improper_ax_idcs[pe_direction[0]]]
        inv = pe_direction[1:] == "-"
        
        # a) if x is present, see if L or R shows up in axcodes. If x-, start with negative polarity otherwise positive.
        #    If L is found, then polarity should be reversed
        # b) if y is present, see if P or A shows up in axcodes. If y-, start with negative polarity otherwise positive.
        #    If P is found, then polarity should be reversed
        # c) if z is present, see if I or S shows up in axcodes, If z-, start with negative polarity otherwise positive.
        #    If I is found, then polarity should be reversed
        
        if pe_direction == 'x':
            if 'L' in axcode:
                inv = not inv
        if pe_direction == 'y':
            if 'P' in axcode:
                inv = not inv
        if pe_direction == 'z':
            if 'I' in axcode:
                inv = not inv
            
        # If the letter we just looked up is on the first axis, then use i
        # If the letter we just looked up is on the second axis, then use j 
        # If the letter we just looked up is on the third axis, then use k 
        
        if improper_ax_idcs[pe_direction[0]] == 0:
            proper_pe_direction = 'i'
        elif improper_ax_idcs[pe_direction[0]] == 1:
            proper_pe_direction = 'j'
        else:
            proper_pe_direction = 'k'
        
        corrected_axcode = ornt[proper_ax_idcs[corrected_pe_direction[0]]]
        
        for ax in axes:
            for flip in (ax, ax[::-1]):
                if flip[not inv].startswith(corrected_axcode):
                    PED = "".join(flip)
        
        print("With a pe_direction of '{}' and orientation of '{}', the " \
             "corrected pe_direction is '{}' " \
             "and the PED value is '{}'".format(pe_direction, ornt, proper_pe_direction, PED))
        return proper_pe_direction, PED


# Perform check
# proper_pe_direction, PED = determinePED(nifti_file, json_file)
proper_pe_direction, PED = determinePED('j-','LAS')
